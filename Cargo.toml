[package]
name = "parquet-wasm"
version = "0.6.0-beta.2"
authors = ["Kyle Barron <kylebarron2@gmail.com>"]
edition = "2021"
description = "WebAssembly Parquet reader and writer."
readme = "README.md"
repository = "https://github.com/kylebarron/parquet-wasm"
license = "MIT OR Apache-2.0"
keywords = ["parquet", "webassembly", "arrow"]
categories = ["wasm"]
rust-version = "1.62"

[lib]
crate-type = ["cdylib", "rlib"]

[features]
default = ["all_compressions", "reader", "writer", "async"]
reader = []
writer = []
async = [
  "dep:wasm-bindgen-futures",
  "dep:futures",
  "dep:range-reader",
  "dep:reqwest",
  "dep:wasm-streams",
  "dep:async-compat",
  "dep:async-stream",
  "parquet/async",
]
debug = ["console_error_panic_hook"]

brotli = ["parquet/brotli"]
gzip = ["parquet/flate2"]
snappy = ["parquet/snap"]
zstd = ["parquet/zstd", "dep:zstd"]
lz4 = ["parquet/lz4"]

all_compressions = ["brotli", "gzip", "snappy", "zstd", "lz4"]

# Full list of available features
full = [
  "async",
  "debug",
  "all_compressions",
  "reader",
  "writer",
]

[dependencies]
wasm-bindgen = { version = "0.2.88", features = ["serde-serialize"] }

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.6", optional = true }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
# if wee_alloc only saves 10KB, might not be worth the slower allocation speed?
# wee_alloc = "0.4.5"

js-sys = "0.3.60"
getrandom = { version = "0.2.6", features = ["js"] }
thiserror = "1.0"

# c7a0db3b2f7034878796939ad46955450cb2c2e7
arrow-wasm = { git = "https://github.com/kylebarron/arrow-wasm", rev = "1d9bee7851d812f10a43a7376f01480375c2d8a2" }
# arrow-wasm = { path = "/Users/kyle/github/rust/arrow-wasm" }

arrow = { version = "50", default-features = false, features = [
  "ipc",
  "ffi",
] }
parquet = { version = "50", default-features = false, features = [
  "arrow",
  "base64",
] }
bytes = "1"

wasm-bindgen-futures = { version = "0.4.30", optional = true }
futures = { version = "0.3", optional = true }
range-reader = { version = "0.2", optional = true }
reqwest = { version = "0.11.22", optional = true, default-features = false }

# Pass "wasm" and "thin" down to the transitive zstd dependency
zstd = { version = "*", features = [
  "wasm",
  "thin",
], default-features = false, optional = true }
async-compat = { version = "0.2.2", optional = true }
async-stream = { version = "0.3.5", optional = true }
wasm-streams = { version = "0.3.0", optional = true }
async-trait = "0.1.74"

[dependencies.web-sys]
version = "0.3.4"
features = [
  'console',
  'Headers',
  'Request',
  'RequestInit',
  'RequestMode',
  'Response',
  'Window',
  "Document",
  "Element",
  "File",
]

[dev-dependencies]
wasm-bindgen-test = "0.3.31"

[package.metadata.cargo-all-features]

# If your crate has a large number of optional dependencies, skip them for speed
skip_optional_dependencies = true

# Exclude certain features from the build matrix
denylist = ["full", "all_compressions", "default"]

[profile.release]
# Tell `rustc` to optimize for small code size.
# As of 3/15/22, opt-level = s was smallest
# https://github.com/kylebarron/parquet-wasm/pull/48
opt-level = "s"
lto = true
